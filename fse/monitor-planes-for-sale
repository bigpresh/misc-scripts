#!/usr/bin/env perl


# Watch for aircraft newly listed for sale.

use strict;
use File::Slurper;
use JSON;
use List::Util;
use List::MoreUtils;
use LWP::UserAgent;
use Mail::Sendmail;
use Net::Netrc;
use Number::Format;
use XML::Simple;


my $fse_server = 'server.fseconomy.net';
my $last_run_data_filename = '/home/davidp/tmp/fse-planes-for-sale';


# The list of people who want notifications, and what notifications they want
# (e.g. regexes to match against planes, locations, or both) is now in a
# config file, so we can act differently for different people
my $recipient_spec_file = '/home/davidp/fse-planes-for-sale-recipients';
my $recipients_spec = do $recipient_spec_file
    or die "Failed to read recipients specs from $recipient_spec_file - $!";

if (ref $recipients_spec ne 'HASH') {
    die "Recipient specs should be a hashref keyed on email addresses";
}



# Cheating and using the "account" field to store my read-only API key.
my $machine = Net::Netrc->lookup($fse_server)
    or die "No login details for $fse_server in ~/.netrc";
my ($user, $pass, $key) = $machine->lpa;

my $ua = LWP::UserAgent->new(
    agent => "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:56.0) Gecko/20100101 Firefox/56.0",
);

# Just to stand out as a little less regular (although to be fair, the feeds are
# there to be consumed automatically!)
sleep int rand 40;

my $url = "data?userkey=$key&format=xml&query=aircraft&search=forsale";
my $response = $ua->get("http://$fse_server/$url");
if (!$response->is_success) {
    die "Data feed request failed - " . $response->status_line;
}

# Yes, XML::Simple is ugly and discouraged - but I still use it for simple
# "here's an XML document, parse it into a data structure for me" stuff.
my $data = XML::Simple::XMLin($response->content);


my @new;
my %prices_for;

# Read in our list of serial numbers which were on sale last time, so we can
# skip ones we saw already - then walk the list of planes, and for each one
# we *didn't* see last time, notify - then save the list of ones we did see
# this time.
my $saw_last_time = JSON::from_json(
    File::Slurper::read_text($last_run_data_filename)
) or die "Failed to read/parse last run data from $last_run_data_filename";
my $saw_this_time = {};
for my $plane (@{$data->{Aircraft}}) {
    push @{ $prices_for{ $plane->{MakeModel} } }, $plane->{SalePrice};
    if (!$saw_last_time->{ $plane->{SerialNumber} }) {
        warn "New plane $plane->{Registration}";
        $plane->{SalePrice} = '$' . Number::Format::format_number(
            $plane->{SalePrice} + $plane->{FeeOwed}
        );
        push @new, $plane;
    } else {
        warn "Meh, saw $plane->{Registration} last time";
    }
    $saw_this_time->{ $plane->{SerialNumber} }++;
}

# Write out the list of ones we saw this time (it'll croak if it fails)
File::Slurper::write_text(
    $last_run_data_filename,
    JSON::to_json($saw_this_time)
);

# if there were new ones, then notify recipients who are interested in them.
if (@new) {
    notify(\@new, $recipients_spec);
}


sub notify {
    my ($planes, $recipients_spec) = @_;

    # for each plane we're reporting on, calculate the average value of that
    # model on sale for comparison
    for my $plane (@$planes) {
        my @prices = @{ $prices_for{ $plane->{MakeModel} } };
        $plane->{avg_price} = '$' . Number::Format::format_number(
            int(List::Util::sum(@prices) / @prices)
        );
        $plane->{others_count} = scalar @prices;
    }

    # For each recipient, see if they'd be interested in this plane, and if so,
    # add it to the notification we'll send them (if it's non-empty at the end!)
    my %planes_by_recipient;
    for my $recipient (keys %$recipients_spec) {
        for my $spec (@{ $recipients_spec->{$recipient} }) {
            for my $plane (@$planes) {
                if (
                    (!$spec->{model} || $plane->{MakeModel} =~ $spec->{model})
                    &&
                    (!$spec->{location} || $plane->{Location} =~ $spec->{location})
                ) {
                    push @{ $planes_by_recipient{$recipient} }, $plane;
                }
            }
        }
    }

    # Now, for each recipient who  we found any planes they'd be interested
    # in, drop them an email
    for my $recipient (keys %planes_by_recipient) {
        my @planes = @{ $planes_by_recipient{$recipient} };
        my $count = scalar @planes;
        my $body = <<PREAMBLE;
Hi!

$count newly-listed planes on FSE were found which match your current
filter settings.  (If you'd like your filter settings updated, please
nudge bigpresh.)

The planes found, listed from least-to-most expensive, follow.

PREAMBLE

        $body .= join "\n\n", map {
            display_plane($_) 
        } sort {
            cmp_price($a->{SalePrice}, $b->{SalePrice})
        } @planes;

        $body .= <<POSTAMBLE;


If you would like to change your filter settings to only see planes
which are likely to be of interest to you (based on model / location)
then nudge me (bigpresh), and I'll update your settings.

Cheers,

Dave P (bigpresh)

POSTAMBLE

        warn "Sending mail: " . $body;
        Mail::Sendmail::sendmail(
            To => $recipient,
            From => 'davidp@preshweb.co.uk',
            Subject => "FSE - $count new planes for sale!",
            message => $body,
        ) or die "failed to send mail - " . $Mail::Sendmail::error;

        }
}

sub display_plane {
    my $plane = shift;

    return sprintf "%s - %s for %s at %s (%s)\n"
        . "(%s others for sale at average %s)\n"
        . "  - %s hours (%s to 100hr) URL: %s",
        @$plane{qw(
        Registration MakeModel SalePrice Location LocationName
        others_count avg_price
        AirframeTime TimeLast100hr
        )},
        url_for_plane($plane);
}

sub url_for_plane {
    my $plane = shift;
    return "http://$fse_server/aircraftlog.jsp?id=" . $plane->{SerialNumber};
}

sub cmp_price {
    my ($a, $b) = map { s/[^0-9.]//gr } @_;
    return $a <=> $b;
}
