#!/usr/bin/env perl

use strict;
use warnings;
use DBI;
use JSON;
use LWP::UserAgent;
use Net::Netrc;

# A script intended to be fed the output from rtl_433 -G -F JSON
#
# Each time a line of JSON is received, parse it, and insert a record in the
# database.
#
# Expects DB connection details in ~/.my.cnf

my $ua = LWP::UserAgent->new(
    agent => $0,
    timeout => 5,
);

line:
while (my $line = <>) {
    my $data;
    eval { $data = JSON::from_json($line); 1 }
        or do {
            # `beep`;
            warn "Failed to parse line: $line";
            next line;
        };

    if (exists $data->{button}) {
        # It's some kind of remote buttton/switch
        if ($data->{model} eq 'RF-tech') {
            # Gate sensor triggered (gate open) 
            warn "Gate open trigger";
            my $creds = Net::Netrc->lookup('notifymyandroid.com');
            if ($creds) {
                my $api_key = $creds->login;
                $ua->post(
                    "https://www.notifymyandroid.com/publicapi/notify",
                    {
                        apikey => $api_key,
                        application => $0,
                        event => "Garden gate open",
                        description => "Garden gate sensor triggered",
                        priority => 1,

                    },
                );
            }
        }

    } elsif (exists $data->{temperature_C}) {
        # Looks like it may be a temp sensor, see what one
        if ($data->{model} eq 'THGR122N' && $data->{channel} eq 3) {
            my $sensor_name = "Garden";
            temp_insert_sth()->execute(
                $sensor_name, @$data{qw(temperature_C humidity battery)},
            ) or warn "DB insert failed: " . get_db()->errstr;
        } else {
            warn "Temperature event from unrecognised sensor: $line";
        }
    } else {
        `beep`;
        warn "Unrecognised event: $line";
    }       

}

{
    my $dbh;
    sub get_db {
        if ($dbh && $dbh->ping) {
            return $dbh;
        } else {
            $dbh = DBI->connect(
                "DBI:mysql:davidp;mysql_read_default_file=$ENV{HOME}/.my.cnf",
            );
            return $dbh;
        }
    }
    sub temp_insert_sth {
        my $dbh = get_db();
        my $sth = $dbh->prepare(<<SQL);
INSERT INTO temperature_records (
    timestamp, sensor, temp_c, humidity_pc, battery_state
) values (
    now(), ?,?,?,?
)
SQL
        return $sth;
    }
}



