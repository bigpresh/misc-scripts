#!/usr/bin/env perl

# check_process_stats, Nagios plugin to monitor running processes in detail
# (c) David Precious <davidp@preshweb.co.uk> 2017-2019
# 
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details. 
#
use strict;
use List::Util qw(sum);
use Monitoring::Plugin;
use Proc::ProcessTable;

my $np = Monitoring::Plugin->new(
    shortname => 'PROCESSES',
    usage => '%s -s|--stat',
);

$np->add_arg(
    spec => "process_name|n=s",
    help => "Only processes with this name",
);
$np->add_arg(
    spec => "process_name_re|pr=s",
    help => "Only processes whose name matches this regex",
);

$np->add_arg(
    spec => "max_ram|m=f",
    help => "Max RAM threshold (per process-name group) in kB",
);
$np->add_arg(
    spec => "max_cpu|c=f",
    help => "Max CPU threshold (per process-name group) in %",
);
$np->add_arg(
    spec => "max_procs|p=f",
    help => "Maximum number of processes (per process-name group)",
);

$np->add_arg(
    spec => "tolerance|t=f",
    help => "warning threshold in percent; values which exceed a threshold"
        . " by this amount or less trigger a warning state instead of critical"
);

$np->add_arg(
    spec    => "include_kernel",
    help    => "Ignore kernel processes (prgp 0) (default is to exclude them)",
    default => 0,
);

# This one is mostly of use if you've used process_name_re to match multiple
# process names but want them to all be counted together as one logical thing
$np->add_arg(
    spec => "override_process_name|o=s",
    help => "Override process name to all matches processes",
);

$np->getopts;

my %cpu_totals;
my %mem_totals;
my %count_by_name;

my $pt = Proc::ProcessTable->new( enable_ttys => 0 );

# For portability, ensure we get what we need on this platform.  Only tested on
# Linux boxes, but *should* work on anything Unix-like at least.
for my $need_field (qw(pid fname rss pctcpu)) {
    if (!grep { $_ eq $need_field } $pt->fields) {
        die "field $need_field isn't returned by Proc::ProcessTable"
            . " on this platform";
    }
}

my $procs = $pt->table;
my $total_procs;
for my $process (@$procs) {
    # Get the process name, trim any trailing whitespace, replace other spaces
    # with underscores (so Graphios doesn't choke on the perfdata)
    my $proc_name = $process->fname;
    $proc_name =~ s/\s+$//;
    $proc_name =~ s/\s/_/g;

    # If we have a process_name or process_name_re arg, see if this one matches
    next if $np->opts->process_name
        && $process->fname ne $np->opts->process_name;
    next if $np->opts->process_name_re
        && $process->fname !~ $np->opts->process_name_re;

    next if $process->pgrp == 0 and !$np->opts->include_kernel;

    # exclude ourselves; since we've obviously only just started up and we're
    # doing stuff, our CPU time percentage would be surprisingly high.
    next if $process->pid == $$;

    my $pctcpu = $process->pctcpu;
    # Not sure why I occasionally see this.
    # TODO: would like to re-work this for better CPU usage figures anyway -
    # i.e. CPU time used in last $x seconds or something.
    $pctcpu = 0 if $pctcpu eq 'inf';

    # If we have a override_proc_name value, then use this to track the usage
    # of this process; useful if you're e.g. using process_name_re to match
    # Firefox and its content children with 'firefox|Web Content.+'
    if (my $override_name = $np->opts->override_process_name) {
        $proc_name = $override_name;
    }

    $cpu_totals{ $proc_name } += $process->pctcpu;
    $mem_totals{ $proc_name } += $process->rss / 1024;
    $count_by_name{ $proc_name }++;
    $total_procs++;
}

# For each process name group we found, add perfdata
for my $proc_name (keys %count_by_name) {
    $np->add_perfdata(
        label => "$proc_name.procs",
        value => $count_by_name{$proc_name},
    );
    $np->add_perfdata(
        label => "$proc_name.total_rss",
        value => $mem_totals{ $proc_name },
        uom   => "kB",
    );
    $np->add_perfdata(
        label => "$proc_name.total_cpu",
        value => $cpu_totals{ $proc_name },
    );
}


# If we're checking thresholds, then see if they're exceeded first:
for (
    { 
        name      => "RAM usage",
        counts    => \%mem_totals,
        threshold => $np->opts->max_ram,
    },
    {
        name      => "CPU usage",
        counts    => \%cpu_totals,
        threshold => $np->opts->max_cpu,
    },
    {
        name      => "Process count",
        counts    => \%count_by_name,
        threshold => $np->opts->max_procs,
    }
) {
    next unless $_->{threshold};
    my ($state, @exceeders) = _get_state_and_exceeders(
        $_->{threshold}, $_->{counts},
    );
    if ($state) {
        $np->nagios_exit(
            $state,
            "$_->{name} threshold exceeded by: " . join ", ", @exceeders,
        );
    }
}



# Given a hash to look in and a threshold value, if any exceed the threshold,
# return the status (WARNING if they're over it but by less than the tolerance
# option, CRITICAL if they're way over) and a list of process names which caused
# it.
sub _get_state_and_exceeders {
    my ($threshold, $counts) = @_;
    my $tolerance_multi = $np->opts->tolerance / 100;
    
    for (
        [ CRITICAL => $threshold + ($threshold * $tolerance_multi) ],
        [ WARNING  => $threshold ],
    ) {
        my ($state, $threshold) = @$_;
        if (my @exceeders = grep { $counts->{$_} > $threshold } keys %$counts) {
            return ($state, @exceeders);
        }
    }
}



# OK, we're either not checking thresholds, or nothing exceeded them, so
# assemble a useful status message and return OK.
my ($highest_cpu) = sort {
    $cpu_totals{$b} <=> $cpu_totals{$a}
} keys %cpu_totals;
my ($highest_mem) = sort {
    $mem_totals{$b} <=> $mem_totals{$a}
} keys %mem_totals;
my ($most_procs)  = sort {
    $count_by_name{$b} <=> $count_by_name{$a}
} keys %count_by_name;
warn "memory figures: " . join ",", values %mem_totals;
my ($total_mem) = sprintf '%.2fMB', List::Util::sum(values %mem_totals) / 1024;
my $status_msg = "$total_procs total procs";
# The details on "greediest bastards" only really makes sense to add if we're
# not filtering by name
if (!$np->opts->override_process_name) {
    my $group_count = scalar keys %count_by_name;
    $status_msg .= ", $group_count unique names";

    my $highest_mem_value = $mem_totals{$highest_mem} > 8192
        ? sprintf("%.2fMB",$mem_totals{$highest_mem} / 1024)
        : $mem_totals{$highest_mem} . "KB";

    $status_msg .= ", highest RAM $highest_mem with "
    . $highest_mem_value . ", highest CPU $highest_cpu with "
    . $cpu_totals{$highest_cpu} . "%, most procs $most_procs with "
    . $count_by_name{$most_procs} . " processes, total RAM $total_mem";
} else {
    $status_msg .= " matching pattern for " . $np->opts->override_process_name
        . " total RAM usage $total_mem";
}

$np->nagios_exit(OK, $status_msg);

