#!/usr/bin/perl

# A simple Nagios plugin to monitor stats from the log file written by the
# LagMeter Minecraft server plugin:
# http://dev.bukkit.org/bukkit-plugins/lagmeter/
#
# A simple and fast way to have Nagios monitor the number of players connected,
# chunks loaded, entity count, and TPS (ticks per second) without messing
# about with RCON and spamming the server logs with RCON connections, etc.
# Outputs perfdata for nagiosgraph too, so you can have pretty graphs.
#
# Author: David Precious (BIGPRESH) <davidp@preshweb.co.uk>
# Released under the Perl Artistic Licence:
# http://dev.perl.org/licenses/artistic.html
#
# Original version 27th March 2018.
# Based on my previous  lagmeter-log-munin which was from Feb 2016. 

use strict;
use Monitoring::Plugin;
use File::ReadBackwards;

my $np = Monitoring::Plugin->new(
    shortname => 'MINECRAFT',
    usage => '%s -s|--stat',
);

$np->add_arg(
    spec => "stat|s=s\@",
    help => "stat:min:max - e.g. 'TPS:18:20' - repeat as needed",
    required => 1,
);

$np->add_arg(
    spec => "logfile|f=s",
    help => "LagMeter log file location",
    required => 1,
);

$np->add_arg(
    spec => "warning|w=f",
    help => "Warning threshold in percent; values that exceed a threshold"
        . " by this amount or less result in a warning, not critical",
    default => 10,
);

$np->getopts;
my $warning = $np->opts->warning / 100;

my %stat_re = (
    players => qr{Players online: (\d+)/\d+},
    chunks  => qr{Total chunks loaded: (\d+)},
    entities => qr{Total entities: (\d+)},
    TPS      => qr{TPS: (\d+)},
);


my $bw = File::ReadBackwards->new($np->opts->logfile)
    or die "Failed to open " . $np->opts->logfile ." - $!";

my $last_entry;

while( defined( my $log_line = $bw->readline ) ) {
    last if $log_line =~ /^$/ && length $last_entry;
    $last_entry .= $log_line;
}

# For each stat we've been asked to check, parse it out of the last
# entry, add perfdata, and check it against the thresholds.
my (@critical, @warning, @ok);
statspec:
for my $statspec (@{ $np->opts->stat }) {
    my ($stat, $min_thres, $max_thres) = split /:/, $statspec;
    if (!exists $stat_re{$stat}) {
        die "Unknown stat '$stat' - valid values: " . join ',', keys %stat_re;
    }
    my ($stat_value) = $last_entry =~ $stat_re{$stat}
        or do {
            push @critical, "No value found for $stat";
            next statspec;
        };

    $np->add_perfdata(
        label => $stat,
        value => $stat_value,
    );

    # First, if it's outside the thresholds plus/minus our warning leeway,
    # it's critical
    if (($stat_value < $min_thres - ($min_thres * $warning))
        ||
        ($stat_value > $max_thres + ($max_thres * $warning)))
    {
        push @critical, "$stat $stat_value";
        next statspec;
    }

    # OK, if it's outside the thresholds but we didn't catch it above,
    # then it's only a warning
    if ($stat_value < $min_thres || $stat_value > $max_thres) {
        push @warning, "$stat $stat_value";
        next statspec;
    }

    # And if neither of the above caught it, then it's fine.
    push @ok, "$stat $stat_value";
}

        
# Assemble all problematic readings, critical ones first:
# TODO: refactor, DRY
my @problems = (@critical, @warning);
if (@critical) {
    $np->nagios_exit(CRITICAL, join ', ', @problems);
} elsif (@warning) {
    $np->nagios_exit(WARNING, join ', ', @problems);
} else {
    $np->nagios_exit(OK, join ', ', @ok);
}
